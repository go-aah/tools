#!/usr/bin/env bash

# Creator: Jeevanandam M. (https://github.com/jeevatkm, jeeva@myjeeva.com)
# Script License: Apache License 2.0 (https://www.apache.org/licenses/LICENSE-2.0)
#
# Report an bugs/improvements at https://aahframework.org/issues
# Requires: bash, mkdir, cp, rm, curl/wget, sed/awk, tr, type, unzip, mktemp
#
# Script install the aah CLI into 'GOPATH/bin'. It should work on
# macOS, Linux, Unix systems and on Windows with msys and mingw.
#
# Usage:
#	$ curl -s https://aahframework.org/install-cli | bash
#	OR
#	$ wget -qO- https://aahframework.org/install-cli | bash
#
# Credits: This script inspired by Caddy server and Glide installer.

trap "exit 1" TERM
set -e

say() {
    echo -e $1
}

quit() {
	echo -e $1
	exit 1
}

fetch() {
	local url="$2"
	local body
	local httpStatusCode
	if [ "$download_cmd" = "curl" ]; then
		httpResponse=$(curl -sL --write-out HTTPSTATUS:%{http_code} "$url")
		httpStatusCode=$(echo $httpResponse | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
		body=$(echo "$httpResponse" | sed -e 's/HTTPSTATUS\:.*//g')
	elif [ "$download_cmd" = "wget" ]; then
		tmpFile=$(mktemp)
		body=$(wget --server-response --content-on-error -q -O - "$url" 2> $tmpFile || true)
		httpStatusCode=$(cat $tmpFile | awk '/^  HTTP/{print $2}')
	fi
	if [ "$httpStatusCode" != 200 ]; then
        say "Unable to fetch '$url', status code $httpStatusCode"
        quit "Response Body: $body"
	fi
	eval "$1='$body'"
}

download() {
    local url="$1"
	local filePath="$2"
	if [ "$download_cmd" = "curl" ]; then
		httpStatusCode=$(curl -s -w '%{http_code}' -L "$url" -o "$filePath")
	elif [ "$download_cmd" = "wget" ]; then
		body=$(wget --quiet --server-response --content-on-error -O "$filePath" "$url")
		httpStatusCode=$(cat $tmpFile | awk '/^  HTTP/{print $2}')
	fi
    echo "$httpStatusCode"
}

cli_version="$1"

# Infer target arch 
target_arch=$(uname -m)
case "$target_arch" in
    x86) target_arch="386";;
    x86_64) target_arch="amd64";;
    i686) target_arch="386";;
    i386) target_arch="386";;
esac

# Infer target OS
target_os=$(echo `uname`|tr '[:upper:]' '[:lower:]')
case "$target_os" in
    mingw*) target_os='windows';;
    msys*) target_os='windows';;
esac

say "Starting aah CLI installer for $target_os/$target_arch"

# Verify Go installation and Check GOPATH environment variable is set
go_cmd=$(which go)
if [ "$?" = "1" ]; then
    quit "Go is not installed, aah CLI requires Go. Please install it"
fi
if [ -z "$GOPATH" ]; then
    go_path=$(go env GOPATH)
    if [ ! -d "$go_path" ]; then
        say "GOPATH \"$go_path\" is not exists, creating one"
        mkdir -p "$go_path"
    fi
fi
if [ ! -d "$go_path/bin" ]; then
    say "GOBIN \"$go_path/bin\" is not exists, creating one. Please add it to PATH"
    mkdir -p "$go_path/bin"
fi
go_bin_dir="$go_path/bin"
go_bin_dir="${go_bin_dir//\\//}"

# Infer download command
if type -p curl >/dev/null 2>&1; then
    download_cmd="curl"
elif type -p wget >/dev/null 2>&1; then
    download_cmd="wget"
else
    quit "Installation aborted, unable to find 'curl' or 'wget'"
fi

# Fetch latest version no and Download aah CLI binary
if [ -z "$cli_version" ]; then
    say "Fetch latest aah CLI version info from https://aahframework.org/version-cli"
    fetch cli_version https://aahframework.org/version-cli
fi
say "Resolve aah CLI release artifact for $cli_version"
cli_release=aah-$cli_version-$target_os-$target_arch
cli_file_name="$cli_release.zip"
cli_tmp_file="/tmp/$cli_file_name"
cli_download_uri="https://github.com/go-aah/tools/releases/download/$cli_version/$cli_file_name"
rm -rf $cli_tmp_file
say "Downloading $cli_download_uri"
status_code=$(download "$cli_download_uri" "$cli_tmp_file")
if [ "$status_code" -ne 200 ]; then
    say "Unable to find aah CLI release $cli_version for your system $target_os/$target_arch"
    say "Note: aah CLI binary distribution available since CLI v0.13.0"
    quit "Please create an issue here https://aahframework.org/issues to add support"
fi

# Install the aah CLI into GOPATH/bin
cli_extract_tmp_dir="/tmp/$cli_release/"
rm -rf $cli_extract_tmp_dir
mkdir -p $cli_extract_tmp_dir
if type unzip >/dev/null 2>&1; then
    unzip -q $cli_tmp_file -d $cli_extract_tmp_dir
else
    quit "Installation aborted, unable to find 'unzip' program. Please install it"
fi
say "Installing aah CLI into $go_bin_dir/"
rm -rf "$go_bin_dir/aah"
cp "$cli_extract_tmp_dir/aah" $go_bin_dir/
rm -rf $cli_tmp_file $cli_extract_tmp_dir
say "Congrats, aah CLI installed successfully"
say "Running aah --version"
aah --version
