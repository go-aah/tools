#!/usr/bin/env bash

# Purpose       : Script installs aah CLI into 'GOPATH/bin'. 
#                 It should work on macOS, Linux BSD systems and Windows with Cygwin.
# Script License: Apache License 2.0 (https://www.apache.org/licenses/LICENSE-2.0)
# Creator       : Jeevanandam M. (https://github.com/jeevatkm, jeeva@myjeeva.com)
# Requires      : bash, mkdir, rm, curl/wget, sed/awk, tr, type, mktemp
# Credits       : This script inspired by Caddy server and Glide installer.
#
# Version History
# ---------------
#   v1.0.0      Initial install aah CLI script created for CLI v0.13.0 release
#
# Report an bugs/improvements at https://aahframework.org/issues
#
# Usage:
#	$ curl -s https://aahframework.org/install-cli | bash
#	OR
#	$ wget -qO- https://aahframework.org/install-cli | bash
#	OR
#	$ curl -s https://aahframework.org/install-cli | bash -s v0.13.0
#	OR
#	$ wget -qO- https://aahframework.org/install-cli | bash -s v0.13.0

trap "exit 1" TERM
set -e

say() {
    echo -e $1
}

quit() {
	echo -e $1
	exit 1
}

fetch() {
	local url="$2"
	local body
	local httpStatusCode
	if [ "$download_cmd" = "curl" ]; then
		httpResponse=$(curl -sL --write-out HTTPSTATUS:%{http_code} "$url")
		httpStatusCode=$(echo $httpResponse | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
		body=$(echo "$httpResponse" | sed -e 's/HTTPSTATUS\:.*//g')
	elif [ "$download_cmd" = "wget" ]; then
		tmpFile=$(mktemp)
		body=$(wget --server-response --content-on-error -q -O - "$url" 2> $tmpFile || true)
		httpStatusCode=$(cat $tmpFile | awk '/^  HTTP/{print $2}')
	fi
	if [ "$httpStatusCode" != 200 ]; then
        say "Unable to fetch '$url', status code $httpStatusCode"
        quit "Response Body: $body"
	fi
	eval "$1='$body'"
}

quiet_git() {
    stdout=$(mktemp)
    stderr=$(mktemp)
    if ! git "$@" </dev/null >$stdout 2>$stderr; then
        cat $stderr >&2
        rm -f $stdout $stderr
        exit 1
    fi
    rm -f $stdout $stderr
}

quiet_go() {
    stdout=$(mktemp)
    stderr=$(mktemp)
    if ! go "$@" </dev/null >$stdout 2>$stderr; then
        cat $stderr >&2
        rm -f $stdout $stderr
        exit 1
    fi
    rm -f $stdout $stderr
}

# check prerequesties check
if ! type -p git >/dev/null 2>&1; then
    quit "aah CLI Installation aborted, unable to find 'git'"
fi
if ! type -p go >/dev/null 2>&1; then
    quit "aah CLI Installation aborted, unable to find 'go'"
fi

# Infer download command
if type -p curl >/dev/null 2>&1; then
    download_cmd="curl"
elif type -p wget >/dev/null 2>&1; then
    download_cmd="wget"
else
    quit "Installation aborted, unable to find 'curl' or 'wget'"
fi

# Infer target arch 
target_arch=$(uname -m)
case "$target_arch" in
    x86) target_arch="386";;
    x86_64) target_arch="amd64";;
    i686) target_arch="386";;
    i386) target_arch="386";;
esac

# Infer target OS
target_os=$(echo `uname`|tr '[:upper:]' '[:lower:]')
case "$target_os" in
    mingw*) target_os='windows';;
    msys*) target_os='windows';;
esac

say "Starting aah CLI installer for $target_os/$target_arch"
say "aah requires >= go.11"

go_path=$GOPATH
if [ -z "$go_path" ]; then
    go_path=$(go env GOPATH)
    if [ ! -d "$go_path" ]; then
        say "GOPATH \"$go_path\" is not exists, creating one"
        mkdir -p "$go_path"
    fi
fi
if [ ! -d "$go_path/bin" ]; then
    say "GOBIN \"$go_path/bin\" is not exists, creating one. Please add it to PATH"
    mkdir -p "$go_path/bin"
fi
go_bin_dir="$go_path/bin"
go_bin_dir="${go_bin_dir//\\//}"

export GO111MODULE=on

cli_version="$1"
# Fetch latest version no
if [ -z "$cli_version" ]; then
    say "Fetch latest version info from https://aahframework.org/version-cli"
    fetch cli_version https://aahframework.org/version-cli
else
    say "Use given version info $cli_version"
fi

cli_import_path=aahframe.work/cli/aah
cli_tmp_dir=$(mktemp -d)
cli_tmp_dir="$cli_tmp_dir/aah-cli"

say "Getting git tag $cli_version"
quiet_git clone -b $cli_version --single-branch --depth 1 https://github.com/go-aah/tools.git $cli_tmp_dir
if [ ! -d "$cli_tmp_dir/aah" ]; then
    quit "It seems there was issue with fetching source code from github for tag $cli_version"
fi
cd $cli_tmp_dir/aah
cli_git_commit_sha=$(git rev-parse HEAD)
just_cli_version=${cli_version#"v"}

say "Build & Install aah CLI into $go_bin_dir/"
quiet_go install -ldflags="-s -w -X main.Version=$just_cli_version -X main.CliCommitID=$cli_git_commit_sha -X main.CliPackaged=true -X main.CliOS=$target_os -X main.CliArch=$target_arch" $cli_import_path
rm -rf $cli_tmp_dir
say "Congrats, aah CLI installed successfully"
