# ------------------------------------------------------------
# aah migrate grammar file
#
# Syntax format is same as aah config format
# ------------------------------------------------------------

file {
  go {
    official_modules = [
      "aahframe.work",
      "aahframe.work/minify/html",
      "aahframe.work/cache/provider/inmemory",
      "aahframe.work/cache/provider/redis",
      "aahframe.work/cache/provider/memcache"
    ]
    
    # Grammar for Go source file (.go)
    # Each line have "from" and "to" replacement
    #
    # Format: "oldsignature", "newsignature"
    # Since v0.12.0 aah migrate evolved to level and incremental processing, 
    # it becomes fun to handle auto code migration :)
    #
    # What is "level/incremental based processing" means?
    # For e.g:
    #   level zero  = 'aah.OnRequest('      ==> 'aah.AppHTTPEngine().OnRequest('
    #   level one   = 'aah.AppHTTPEngine()' ==> 'aah.App().HTTPEngine()'
    #   and so on as required.
    #
    # This approach brings advantage of migrating any aah lower version of 
    # aah application into latest version of aah incrementally.
    levels  = [
      "level_zero",
      "level_one"
    ]

    level_zero = [
      "aah.AddServerTLSConfig(", "aah.SetTLSConfig(",
      "aah.EventOnAfterReply", "aah.EventOnPostReply",
      "aah.OnShutdown(", "aah.OnPostShutdown(",
      "// Event: OnShutdown", "// Event: OnPostShutdown",
      "aah.OnRequest(", "aah.AppHTTPEngine().OnRequest(",
      "aah.OnPreReply(", "aah.AppHTTPEngine().OnPreReply(",
      "aah.OnPostReply(", "aah.AppHTTPEngine().OnPostReply(",
      "aah.OnAfterReply(", "aah.AppHTTPEngine().OnPostReply(",
      "aah.OnPreAuth(", "aah.AppHTTPEngine().OnPreAuth(",
      "aah.OnPostAuth(", "aah.AppHTTPEngine().OnPostAuth(",
      "aah.Middlewares(", "aah.AppHTTPEngine().Middlewares(",
      ".SubscribeEventf(", ".SubscribeEventFunc(",
      ".UnsubscribeEventf(", ".UnsubscribeEventFunc(",
      "aah.KeyViewArgRequestParams", "aah.KeyViewArgRequest",
      "ahttp.GetResponseWriter(", "ahttp.AcquireResponseWriter(",
      "ahttp.PutResponseWriter(", "ahttp.ReleaseResponseWriter(",
      "ahttp.GetGzipResponseWriter(", "ahttp.WrapGzipWriter(",
      "ahttp.PutGzipResponseWiriter(", "ahttp.ReleaseResponseWriter(",
      "Req.Raw", "Req.Unwrap()",
      "Req.Raw.URL", "Req.URL()",
      ".Unwrap().FormValue(", ".Req.FormValue(",
      "Req.AcceptContentType", "Req.AcceptContentType()",
      "Req.AcceptEncoding", "Req.AcceptEncoding()",
      "Req.ClientIP", "Req.ClientIP()",
      "Req.ContentType", "Req.ContentType()",
      "Req.Locale", "Req.Locale()",
      ".Readfrom(", ".FromReader(",
      ".RedirectSts(", ".RedirectWithStatus(",
      ".FindDomain(", ".Lookup(",
      ".ReverseURL(", ".RouteURL(",
      ".ReverseURLm(", ".RouteURLNamedArgs(",
      ".GetAuthScheme(", ".AuthScheme(",
      "\"aahframework.org/aah.v0\"", "\"aahframe.work\"",
      "\"aahframework.org/ahttp.v0\"", "\"aahframe.work/ahttp\"",
      "\"aahframework.org/ainsp.v0\"", "\"aahframe.work/ainsp\"",
      "\"aahframework.org/aruntime.v0\"", "\"aahframe.work/aruntime\"",
      "\"aahframework.org/config.v0\"", "\"aahframe.work/config\"",
      "\"aahframework.org/essentials.v0\"", "\"aahframe.work/essentials\"",
      "\"aahframework.org/i18n.v0\"", "\"aahframe.work/i18n\"",
      "\"aahframework.org/log.v0\"", "\"aahframe.work/log\"",
      "\"aahframework.org/router.v0\"", "\"aahframe.work/router\"",
      "\"aahframework.org/security.v0\"", "\"aahframe.work/security\"",
      "\"aahframework.org/security.v0/", "\"aahframe.work/security/",
      "\"aahframework.org/vfs.v0\"", "\"aahframe.work/vfs\"",
      "\"aahframework.org/ws.v0\"", "\"aahframe.work/ws\"",
      "\"aahframework.org/valpar.v0\"", "\"aahframe.work/valpar\"",
      "\"aahframework.org/view.v0\"", "\"aahframe.work/view\"",
      "\"github.com/aah-cb/minify\"", "\"aahframe.work/minify/html\"",
      "Req.Referer", "Req.Referer()",
      "Req.UserAgent", "Req.UserAgent()",
      "aah.AppBaseDir()", "aah.App().BaseDir()", 
      "aah.AppConfig()", "aah.App().Config()", 
      "aah.AppDefaultI18nLang()", "aah.App().DefaultI18nLang()",
      "aah.AppDesc()", "aah.App().Desc()"
      "aah.AppHTTPAddress()", "aah.App().HTTPAddress()",
      "aah.AppHTTPPort()", "aah.App().HTTPPort()",
      "aah.AppI18n()", "aah.App().I18n()",
      "aah.AppI18nLocales()", "aah.App().I18nLocales()",
      "aah.AppImportPath()", "aah.App().ImportPath()",
      "aah.AppInstanceName()", "aah.App().InstanceName()",
      "aah.AppIsSSLEnabled()", "aah.App().IsSSLEnabled()",
      "aah.AppLog()", "aah.App().Log()",
      "aah.AppName()", "aah.App().Name()",
      "aah.AppProfile()", "aah.App().EnvProfile()",
      "aah.AllAppProfiles()", "aah.App().EnvProfiles()",
      "aah.AppRouter()", "aah.App().Router()",
      "aah.AppSSLCert()", "aah.App().SSLCert()",
      "aah.AppSSLKey()", "aah.App().SSLKey()",
      "aah.AppSecurityManager()", "aah.App().SecurityManager()",
      "aah.AppSessionManager()", "aah.App().SessionManager()",
      "aah.AppVFS()", "aah.App().VFS()",
      "aah.AppViewEngine()", "aah.App().ViewEngine()",
      "aah.AppVirtualBaseDir()", "aah.App().VirtualBaseDir()",
      "aah.AppWSEngine()", "aah.App().WSEngine()",
      "aah.AppEventStore()", "aah.App().EventStore()", 
      "aah.AppBuildInfo()", "aah.App().BuildInfo()", 
      "aah.AddController(", "aah.App().AddController(",
      "aah.AddLoggerHook(", "aah.App().AddLoggerHook(",
      "aah.AddPasswordAlgorithm(", "aah.App().AddPasswordAlgorithm(",
      "aah.AddSessionStore(", "aah.App().AddSessionStore(",
      "aah.AddTemplateFunc(", "aah.App().AddTemplateFunc(",
      "aah.AddValueParser(", "aah.App().AddValueParser(",
      "aah.AddViewEngine(", "aah.App().AddViewEngine(",
      "aah.AddWebSocket(", "aah.App().AddWebSocket(",
      "aah.NewChildLogger(", "aah.App().NewChildLogger(",
      "aah.OnInit(", "aah.App().OnInit(",
      "aah.OnPreShutdown(", "aah.App().OnPreShutdown(",
      "aah.OnStart(", "aah.App().OnStart(", 
      "aah.PublishEvent(", "aah.App().PublishEvent(",
      "aah.PublishEventSync(", "aah.App().PublishEventSync(",
      "aah.SetErrorHandler(",  "aah.App().SetErrorHandler(", 
      "aah.SetMinifier(", "aah.App().SetMinifier(",
      "aah.Shutdown()", "aah.App().Shutdown()",
      "aah.Start()", "aah.App().Start()",
      "aah.SubscribeEvent(",  "aah.App().SubscribeEvent(", 
      "aah.UnsubscribeEvent(", "aah.App().UnsubscribeEvent(",
      "aah.Validate(", "aah.App().Validate(",
      "aah.ValidateValue(", "aah.App().ValidateValue(",
      "aah.Validator()", "aah.App().Validator()",
    ]

    level_one = [
      "aah.AppHTTPEngine()", "aah.App().HTTPEngine()",
      "Req.Unwrap().URL", "Req.URL()",
      "aah.SetTLSConfig(", "aah.App().SetTLSConfig(",
      "aah.OnPostShutdown(", "aah.App().OnPostShutdown(", 
      "aah.SubscribeEventFunc(", "aah.App().SubscribeEventFunc(",
      "aah.UnsubscribeEventFunc(", "aah.App().UnsubscribeEventFunc(",
    ]
  }

  # Grammar for View files
  # Each line have "from" and "to" replacement
  #
  # Format: "oldsignature", "newsignature"
  view {
    # Since v0.12.0 aah migrate evolved to level and incremental processing, 
    # it becomes fun to handle auto code migration :)
    #
    # Plus rule skip check too.
    levels  = [
      "level_zero"
      "level_one"
    ]

    level_zero {
      grammar_set1 {
        grammar = [
          "%delim_start% anitcsrftoken . %delim_end%", "%delim_start% anticsrftoken . %delim_end%",
          "%delim_start%anitcsrftoken .%delim_end%", "%delim_start%anticsrftoken .%delim_end%",
          "name=\"anit_csrf_token\"", "name=\"anti_csrf_token\"",
          "%delim_start% import \"", "%delim_start% include \"",
          "%delim_start%import \"", "%delim_start%include \"",
        ]
      }
    }

    level_one {
      grammar_set1 {
        # If check exists skip this grammar
        skip_check = "include \"/common"
        grammar = [
          "%delim_start% include \"", "%delim_start% include \"/common/", 
          "%delim_start%include \"", "%delim_start%include \"/common/", 
          "%delim_start% include \"common/", "%delim_start% include \"/common/",
          "%delim_start%include \"common/", "%delim_start%include \"/common/",
        ]
      }      
    }

  }  
}
